infl = as.vector(Mishkin[,1])  # pai1 = one-month inflation rate
#  (in percent, annual rate)
year = seq(1950 + 1/12,1990+11/12,1/12)
n=length(year)
logn=log(n)
fit_diff=arima(diff(infl),c(0,0,3))
pred.infl_diff =predict(fit_diff, n.ahead = 100, newxreg = NULL,
se.fit = TRUE)
t1 = 300:491
t2 = 492:(492+49+50)
resid = fit_diff$resid[488:490]
coeff = as.vector(fit_diff$coef[1:3])
mu = as.vector(fit_diff$coef[4])
niter = 50000
n.ahead =30
futureobs = matrix(0,nrow=niter,ncol=n.ahead)
future_int = futureobs
set.seed(1234576)
for (i in 1:niter)
{
errors = sample(fit_diff$resid, n.ahead, replace = TRUE)
#  errors = rnorm(30,mean=0,sd = sqrt(fit_diff$sigma2))
errors = c(resid,errors)
for (j in 1:n.ahead)
{
futureobs[i,j] = mu + errors[j+3] + errors[j+2]*coeff[1]+
errors[j+1]*coeff[2] + errors[j]*coeff[3]
if (j > 1)
{
future_int[i,j] = future_int[i,j-1] + futureobs[i,j]
}
if (j==1){future_int[i,j] = futureobs[i,j]
}
}
}
future_mean = apply(futureobs,2,mean)
ul = 0*(1:n.ahead)
ll =ul
for (k in 1:n.ahead)
{
ul[k] = quantile(futureobs[,k],.975)
ll[k] = quantile(futureobs[,k],.025)
}
postscript("inflation_forecasts_sim.ps")   #  Figure 9.21
plot(1:n.ahead,ul,ylim=c(-10,10),type="b",lwd=2,xlab="month ahead",
ylab="rate",cex.axis=1.5,cex.lab=1.5)
lines(ll,type="b",lwd=2)
lines(1:n.ahead, pred.infl_diff$pred[1:n.ahead] -
1.96*pred.infl_diff$se[1:n.ahead],type="b",lty=3)
lines(1:n.ahead, pred.infl_diff$pred[1:n.ahead] +
1.96*pred.infl_diff$se[1:n.ahead],type="b",lty=3)
lines(1:n.ahead, future_mean,lwd=2,lty=2)
#  Ex 9.16 including Figures 9.20 - 9.22
data(Mishkin,package="Ecdat")
infl = as.vector(Mishkin[,1])  # pai1 = one-month inflation rate
#  (in percent, annual rate)
year = seq(1950 + 1/12,1990+11/12,1/12)
n=length(year)
logn=log(n)
fit_diff=arima(diff(infl),c(0,0,3))
pred.infl_diff =predict(fit_diff, n.ahead = 100, newxreg = NULL,
se.fit = TRUE)
t1 = 300:491
t2 = 492:(492+49+50)
resid = fit_diff$resid[488:490]
coeff = as.vector(fit_diff$coef[1:3])
mu = as.vector(fit_diff$coef[4])
niter = 50000
n.ahead =30
futureobs = matrix(0,nrow=niter,ncol=n.ahead)
future_int = futureobs
set.seed(1234576)
for (i in 1:niter)
{
errors = sample(fit_diff$resid, n.ahead, replace = TRUE)
#  errors = rnorm(30,mean=0,sd = sqrt(fit_diff$sigma2))
errors = c(resid,errors)
for (j in 1:n.ahead)
{
futureobs[i,j] = mu + errors[j+3] + errors[j+2]*coeff[1]+
errors[j+1]*coeff[2] + errors[j]*coeff[3]
if (j > 1)
{
future_int[i,j] = future_int[i,j-1] + futureobs[i,j]
}
if (j==1){future_int[i,j] = futureobs[i,j]
}
}
}
future_mean = apply(futureobs,2,mean)
ul = 0*(1:n.ahead)
ll =ul
for (k in 1:n.ahead)
{
ul[k] = quantile(futureobs[,k],.975)
ll[k] = quantile(futureobs[,k],.025)
}
#postscript("inflation_forecasts_sim.ps")   #  Figure 9.21
plot(1:n.ahead,ul,ylim=c(-10,10),type="b",lwd=2,xlab="month ahead",
ylab="rate",cex.axis=1.5,cex.lab=1.5)
lines(ll,type="b",lwd=2)
lines(1:n.ahead, pred.infl_diff$pred[1:n.ahead] -
1.96*pred.infl_diff$se[1:n.ahead],type="b",lty=3)
lines(1:n.ahead, pred.infl_diff$pred[1:n.ahead] +
1.96*pred.infl_diff$se[1:n.ahead],type="b",lty=3)
lines(1:n.ahead, future_mean,lwd=2,lty=2)
#graphics.off()
data(Hstarts,package="Ecdat")
hst = Hstarts[,1]
x =hst
t = seq(1960.25,2002,.25)
year =t
n = length(t)
fit = arima(hst,c(1,1,1),seasonal = list(order = c(1,1,1), period = 4))
fit2 = arima(hst,c(1,1,1),seasonal = list(order = c(0,1,1), period = 4))
pred =predict(fit2, n.ahead = 16, newxreg = NULL,
se.fit = TRUE)
t1 = 130:168
t2 = 169:(169+15)
x = as.matrix(x)
par(mfrow=c(1,3))
plot(t,x,ylab="log(starts)",type="b",xlab="year",main="(a)")
acf(x,main="(b)",xlab="lag")
quart = rep(1,42) %x% (1:4)
boxplot(x~quart,xlab="quarter",ylab="log(starts)",main="(c)")
par(mfrow=c(3,2))
plot(year[2:n],diff(x),xlab="year",type="b",
main="(a) nonseasonal differencing")
acf(diff(x),main="(b) nonseasonal differencing",xlab="lag")
plot(year[5:n],diff(x,4),type="b",xlab="year",
main="(c) seasonal differencing")
acf(diff(x,4),main="(d) seasonal differencing",xlab="lag")
plot(year[6:n], diff(diff(x,1),4),type="b",xlab="year",
main="(e) seasonal & nonseasonal differencing")
acf( diff(diff(x,1),4),main="(f) seasonal & nonseasonal differencing",
xlab="lag")
clear
setwd("~/Downloads/midterm")
data = read.table('A0181923A.csv', sep="\t", header=FALSE)
head(data)
data
monthlySales = data[,1]
data = read.table('A0181923A.csv', sep="\t", header=FALSE)
monthlySales = data[,1]
plot(monthlySales)
plot(monthlySales)
data[2,1]-data[1,1]
plot(data[,2])
plot(monthlySales)
data = read.table('A0181923A.csv', sep="\t", header=FALSE)
monthlySales = data[,1]
plot(monthlySales)
acf(monthlySales)
lm(monthlySales~time(monthlySales)
)
time(monthlySales)
trend = lm(monthlySales~time(monthlySales))
detrend_monthlySales= monthlySales-predict(trend)
plot(detrend_monthlySales)
adf(detrend_monthlySales)
library(tseries)
adf.test(detrend_monthlySales)
auto.arima(detrend_monthlySales,max.P=0,max.Q=0,ic="bic")
library(tseries)
auto.arima(detrend_monthlySales,max.P=0,max.Q=0,ic="bic")
library(forecast)
adf.test(detrend_monthlySales)
auto.arima(detrend_monthlySales,max.P=0,max.Q=0,ic="bic")
acf(detrend_monthlySales)
acf(detrend_monthlySales^2)
acf(residuals(trend))
acf(residuals(trend)^2)
Box.test(residuals(trend), lag = 10, type="Ljung")
Box.test(residuals(trend)^2, lag = 10, type="Ljung")
library(fGarch)
garchFit(formula = ~ trend + garch(1,1), monthlySales)
garchFit(formula = ~ arma(1,0) + garch(1,1), monthlySales)
garchFit(formula = ~ time(monthlySales) + garch(1,1), monthlySales)
library(rugarch)
install.packages('rugarch')
library(rugarch)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time(monthlySales)),
distribution.model = "norm")
time(monthlySales)
set.seed(234)
ext.reg.1 <- 0.01 * (sin(2*pi*(1:nb.period)/nb.period))/2 + rnorm(nb.period, 0, 0.0001)
list(time(monthlySales))
as.numeric(time(monthlySales))
as.numeric(time(monthlySales))
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = as.numeric(time(monthlySales))),
distribution.model = "norm")
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = c(1:300)),
distribution.model = "norm")
regressor = c(1:300)
regressor
regressor = c(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = regressor),
distribution.model = "norm")
regressor = cbind(1:300)
regressor
regressor = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = regressor),
distribution.model = "norm")
time = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "norm")
fit      <- ugarchfit(data = monthlySales, spec = fit.spec)
print(fit.val)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "norm")
fit <- ugarchfit(data = monthlySales, spec = fit.spec)
print(fit.val)
fit
residual(fit)
residuals(fit)
acf(residuals(fit))
acf(residuals(fit)^2)
sigma(fit)
residiual <- residiuals(fit)
residiual <- residuals(fit)
std_residual <- residiual/sigma(fit)
acf(std_residual^2)
Box.test(residual, lag = 10, type="Ljung")
residiual <- residuals(fit)
Box.test(residiual, lag = 10, type="Ljung")
detrend_monthlySales= monthlySales-predict(trend)
plot(detrend_monthlySales)
qqnorm(residiual)
qqline(residual)
qqline(residiual)
shapiro.test(residiual)
Box.test(std_residual, lag = 10, type="Ljung")
sharpiro.test
shapiro.test(residual)
time = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "norm")
fit <- ugarchfit(data = monthlySales, spec = fit.spec)
residual <- residuals(fit)
Box.test(residual, lag = 10, type="Ljung")
std_residual <- residual/sigma(fit)
Box.test(std_residual, lag = 10, type="Ljung")
shapiro.test(residual)
residual
shapiro.test(as.numeric(residual))
time = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "std")
fit <- ugarchfit(data = monthlySales, spec = fit.spec)
residual <- residuals(fit)
Box.test(residual, lag = 10, type="Ljung")
std_residual <- residual/sigma(fit)
n=length(monthlySales)
grid = (1:n)/(n+1)
qqplot(sort(residual), qt(grid,df=4),
main="(b) t plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(   qt(c(.25,.75),df=4)~quantile(x,c(.25,.75))   )   )
n=length(monthlySales)
grid = (1:n)/(n+1)
qqplot(sort(residual), qt(grid,df=4),
main="(b) t plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(   qt(c(.25,.75),df=4)~quantile(x,c(.25,.75))   )   )
n=length(monthlySales)
grid = (1:n)/(n+1)
qqplot(sort(residual), qt(grid,df=4),
main="(b) t plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(   qt(c(.25,.75),df=4)~quantile(x,c(.25,.75))   )   )
n=length(monthlySales)
grid = (1:n)/(n+1)
qqplot(sort(residual), qt(grid,df=4),
main="(b) t plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
plot(monthlySales)
sort(residual)
qqplot(sort(residual), qt(grid,df=4))
qqplot(sort(residual), qt(grid,df=1))
qqnorm(residiual)
qqplot(residual)
time = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "std")
fit <- ugarchfit(data = monthlySales, spec = fit.spec)
residual <- residuals(fit)
Box.test(residual, lag = 10, type="Ljung")
std_residual <- residual/sigma(fit)
Box.test(std_residual, lag = 10, type="Ljung")
qqplot(residual)
qqplot(u=residual)
qqplot(y=residual)
qqplot(sort(residual), qt(grid,df=1))
qqplot(y=sort(residual), x = qt(grid,df=1))
qqplot(x=sort(residual), y = qt(grid,df=1))
qqnorm(residual)
qqnorm(residual)
qqnorm(residual)
qqline(residual)
summary(fit)
fit
gains = data[,2]
plot(gains)
acf(gains)
adf(gains)
adf.test(gains)
plot(gains)
plot(gains,type='l')
plot(detrend_monthlySales,type='l')
adf.test(gains)
auto.arima(gains,max.P=0,max.Q=0,ic="bic")
fit1 = arima(gains,order=c(0,0,2))
resid = residuals(fit1)
acf(resid)
acf(resid^2)
fit1 = garchFit(formula = ~arma(0,2)+garch(1,1),gains)
fit1 = garchFit(formula = ~arma(0,2)+garch(1,1),gains)
resid = residuals(fit1)
acf(resid)
fit1 = garchFit(formula = ~arma(0,2)+garch(1,1),gains)
fit1 = garchFit(formula = ~arma(0,2)+garch(1,1),gains)
resid = residuals(fit1)
fit1 = garchFit(formula = ~arma(0,3)+garch(1,1),gains)
resid = residuals(fit1)
acf(resid)
fit1 = garchFit(formula = ~arma(0,1)+garch(1,1),gains)
resid = residuals(fit1)
acf(resid)
fit1 = garchFit(formula = ~arma(0,2)+garch(1,1),gains)
resid = residuals(fit1)
box.test(resid)
Box.test(resid)
fit1 = arima(gains,order=c(0,0,3))
resid = residuals(fit1)
box.test(resid)
Box.test(resid)
Box.test(resid^2)
fit1 = archFit(~arma(1,1)+garch(1,1),cond.dist="std",data=gains)
resid = residuals(fit1)
fit1 = garchFit(~arma(1,1)+garch(1,1),cond.dist="std",data=gains)
resid = residuals(fit1)
Box.test(resid)
acf(resid)
acf(resid^2)
fit1 = garchFit(~arma(0,2)+garch(1,1),cond.dist="std",data=gains)
resid = residuals(fit1)
Box.test(resid)
fit1 = garchFit(~arma(0,2)+garch(1,1),data=gains)
resid = residuals(fit1)
Box.test(resid)
fit1 = garchFit(~arima(0,0,2)+garch(1,1),data=gains)
fit1 = garchFit(~ma(2)+garch(1,1),data=gains)
fit1 = garchFit(~arma(0,2)+garch(1,1),data=gains)
resid = residuals(fit1)
acf(resid)
auto.arima(gains,max.P=0,max.Q=0,ic="bic")
auto.arima(gains,max.P=0,max.Q=0,ic="aic")
auto.arima(gains,max.P=0,max.Q=0,ic="aicc")
fit1 = garchFit(~arma(2,1)+garch(1,1),data=gains)
resid = residuals(fit1)
acf(resid)
Box.test(resid)
acf(resid^2)
Box.test(resid)
gains = data[,2]
plot(gains)
acf(gains)
adf.test(gains)
auto.arima(gains,max.P=0,max.Q=0,ic="aic")
fit1 = garchFit(~arma(2,1)+garch(1,1),data=gains)
res = residuals(fit1)
acf(res)
acf(res^2)
res_std = res / fit1@sigma.t
acf(res_std^2)
fit1@fit$matcoef
auto.arima(gains,max.P=0,max.Q=0,ic="aic")
qqnorm(resid)
qqline(resid)
shapiro.test(resid)
gains = data[,2]
plot(gains)
acf(gains)
adf.test(gains)
auto.arima(gains,max.P=0,max.Q=0,ic="aic")
fit1 = garchFit(~arma(2,1)+garch(1,1),data=gains,cond.dist = 'std')
res = residuals(fit1)
acf(res)
acf(res^2)
res_std = res / fit1@sigma.t
acf(res_std^2)
fit1@fit$matcoef
fit1@fit$matcoef[,1]
fit1$icc
fit1$ic
fit1@residuals
summary(fit)
fit
gains = data[,2]
plot(gains)
acf(gains)
adf.test(gains)
auto.arima(gains,max.P=0,max.Q=0,ic="aic")
fit1 = garchFit(~arma(2,1)+garch(1,1),data=gains,cond.dist = 'std')
res = residuals(fit1)
acf(res)
acf(res^2)
res_std = res / fit1@sigma.t
acf(res_std^2)
fit1@fit$matcoef[,1]
fit1
AIC(fit1)
fit1
summary(fit1)
forecasts1 = predict(fit,1)
forecasts1 = predict(fit1,1)
forecasts1
forecasts2 = predict(fit2,2)
forecasts2
ci1 = forecasts1$pred + 1.96*forecasts$se
forecasts1 = predict(fit1,1)
ci1 = forecasts1$pred + 1.96*forecasts1$se
ci1
forecasts1 = predict(fit1,1)
forecasts1$pred
forecasts1 = predict(fit1,1)
forecasts1
library(forecast)
forecasts1
forecasts1 = predict(fit1,1)
forecasts1$pred
forecasts1 = predict(fit1,100)
forecasts1 = predict(fit1,10)
forecasts1 = predict(fit1,1)
forecasts1 = predict(fit1,2)
forecasts1 = predict(fit1,10)
forecasts1 = predict(fit1,3)
forecasts1 = predict(fit1,1)
forecasts1
forecasts2
ic1 = forecasts$pred + 1.96*forecasts$se
ic1
forecasts = predict(fit1,2)
ic1 = forecasts$pred + 1.96*forecasts$se
ic1
forecasts = predict(fit1,2)
forecasts
plot(gains)
ic1 = forecasts$meanForecasts + 1.96*forecasts$standardDeviation
ic1
ic = forecasts$meanForecast + 1.96*forecasts$standardDeviation
ic
upper_ic = forecasts$meanForecast + 1.96*forecasts$standardDeviation
lower_ic = forecasts$meanForecast - 1.96*forecasts$standardDeviation
upper_ic
lower_ic
fit1@fit$matcoef[,1]
t(fit1@fit$matcoef[,1])
fit1@fit$matcoef[,1]
fit1@fit$matcoe
time = cbind(1:300)
fit.spec <- ugarchspec(variance.model     = list(model = "sGARCH",
garchOrder = c(1, 1)),
mean.model         = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = time),
distribution.model = "std")
fit <- ugarchfit(data = monthlySales, spec = fit.spec)
fit
summary(fit)
fit
data = read.table('A0181923A.csv', sep="\t", header=FALSE)
